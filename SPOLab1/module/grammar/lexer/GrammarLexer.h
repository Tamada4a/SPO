/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : Grammar.g
 *     -                            On : 2024-10-13 21:32:06
 *     -                 for the lexer : GrammarLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
GrammarLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pGrammarLexer, which is returned from a call to GrammarLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pGrammarLexer are  as follows:
 *
 *  - 
 void
      pGrammarLexer->T__75(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__76(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__77(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__78(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__79(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__80(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__81(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__82(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__83(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__84(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__85(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__86(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__87(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__88(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__89(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__90(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__91(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__92(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__93(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__94(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__95(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__96(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__97(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__98(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__99(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__100(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__101(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__102(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__103(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__104(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__105(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__106(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__107(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__108(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__109(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__110(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__111(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__112(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__113(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__114(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__115(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__116(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__117(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__118(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__119(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__120(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__121(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__122(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__123(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__124(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__125(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__126(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__127(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__128(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__129(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->T__130(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->ID(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->STRING(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->CHARACTER(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->HEXADEMIC(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->BIT(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->DECIMAL(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->WHITESPACE(pGrammarLexer)
 *  - 
 void
      pGrammarLexer->Tokens(pGrammarLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GrammarLexer_H
#define _GrammarLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct GrammarLexer_Ctx_struct GrammarLexer, * pGrammarLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
GrammarLexer

 */
struct GrammarLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__75)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__87)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__88)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__89)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__90)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__91)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__92)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__93)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__96)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__97)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__98)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__99)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__100)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__101)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__102)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__103)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__104)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__105)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__106)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__107)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__108)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__109)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__110)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__111)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__112)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__113)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__114)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__115)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__116)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__117)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__118)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__119)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__120)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__121)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__122)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__123)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__124)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__125)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__126)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__127)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__128)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__129)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mT__130)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mCHARACTER)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mHEXADEMIC)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mBIT)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mDECIMAL)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct GrammarLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct GrammarLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct GrammarLexer_Ctx_struct * ctx);
    void	    (*free)   (struct GrammarLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pGrammarLexer GrammarLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pGrammarLexer GrammarLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define ArgDef      4
#define Array      5
#define BIT      6
#define BinOpAss      7
#define BinOpBinAnd      8
#define BinOpBinAssAnd      9
#define BinOpBinAssDiv      10
#define BinOpBinAssLS      11
#define BinOpBinAssMod      12
#define BinOpBinAssMul      13
#define BinOpBinAssNeg      14
#define BinOpBinAssOr      15
#define BinOpBinAssRS      16
#define BinOpBinAssSum      17
#define BinOpBinAssXOR      18
#define BinOpBinLS      19
#define BinOpBinMinus      20
#define BinOpBinOr      21
#define BinOpBinPlus      22
#define BinOpBinRS      23
#define BinOpBinXOR      24
#define BinOpDiv      25
#define BinOpEq      26
#define BinOpGt      27
#define BinOpGte      28
#define BinOpLogAnd      29
#define BinOpLogOr      30
#define BinOpLt      31
#define BinOpLte      32
#define BinOpMod      33
#define BinOpMul      34
#define BinOpNonEq      35
#define Binary      36
#define Bits      37
#define Block      38
#define BoolStatement      39
#define Braces      40
#define BreakStatement      41
#define Builtin      42
#define CHARACTER      43
#define Call      44
#define CharStatement      45
#define Custom      46
#define DECIMAL      47
#define Dec      48
#define DoStatement      49
#define Expr      50
#define Expression      51
#define FuncDef      52
#define FuncSignature      53
#define HEXADEMIC      54
#define Hex      55
#define ID      56
#define IdItem      57
#define Identifier      58
#define IfStatement      59
#define Indexer      60
#define List      61
#define Literal      62
#define Place      63
#define STRING      64
#define Source      65
#define SourceItem      66
#define Statement      67
#define Str      68
#define TypeRef      69
#define UnOp      70
#define Unary      71
#define Var      72
#define WHITESPACE      73
#define WhileStatement      74
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for GrammarLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
