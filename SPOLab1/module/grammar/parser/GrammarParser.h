/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : Grammar.g
 *     -                            On : 2024-10-13 21:32:04
 *     -                for the parser : GrammarParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
GrammarParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pGrammarParser, which is returned from a call to GrammarParserNew().
 *
 * The methods in pGrammarParser are  as follows:
 *
 *  - 
 GrammarParser_identifier_return
      pGrammarParser->identifier(pGrammarParser)
 *  - 
 GrammarParser_str_return
      pGrammarParser->str(pGrammarParser)
 *  - 
 GrammarParser_charStatement_return
      pGrammarParser->charStatement(pGrammarParser)
 *  - 
 GrammarParser_hex_return
      pGrammarParser->hex(pGrammarParser)
 *  - 
 GrammarParser_bits_return
      pGrammarParser->bits(pGrammarParser)
 *  - 
 GrammarParser_dec_return
      pGrammarParser->dec(pGrammarParser)
 *  - 
 GrammarParser_boolStatement_return
      pGrammarParser->boolStatement(pGrammarParser)
 *  - 
 GrammarParser_binOpBinAssLog_return
      pGrammarParser->binOpBinAssLog(pGrammarParser)
 *  - 
 GrammarParser_binOpBinAssShift_return
      pGrammarParser->binOpBinAssShift(pGrammarParser)
 *  - 
 GrammarParser_binOpMultAss_return
      pGrammarParser->binOpMultAss(pGrammarParser)
 *  - 
 GrammarParser_binOpSumAss_return
      pGrammarParser->binOpSumAss(pGrammarParser)
 *  - 
 GrammarParser_binOpAss_return
      pGrammarParser->binOpAss(pGrammarParser)
 *  - 
 GrammarParser_binOpLogOr_return
      pGrammarParser->binOpLogOr(pGrammarParser)
 *  - 
 GrammarParser_binOpLogAnd_return
      pGrammarParser->binOpLogAnd(pGrammarParser)
 *  - 
 GrammarParser_binOpBinOr_return
      pGrammarParser->binOpBinOr(pGrammarParser)
 *  - 
 GrammarParser_binOpXOR_return
      pGrammarParser->binOpXOR(pGrammarParser)
 *  - 
 GrammarParser_binOpBinAnd_return
      pGrammarParser->binOpBinAnd(pGrammarParser)
 *  - 
 GrammarParser_binOpEq_return
      pGrammarParser->binOpEq(pGrammarParser)
 *  - 
 GrammarParser_binOpComp_return
      pGrammarParser->binOpComp(pGrammarParser)
 *  - 
 GrammarParser_binOpBinShift_return
      pGrammarParser->binOpBinShift(pGrammarParser)
 *  - 
 GrammarParser_binOpPlus_return
      pGrammarParser->binOpPlus(pGrammarParser)
 *  - 
 GrammarParser_binOpMult_return
      pGrammarParser->binOpMult(pGrammarParser)
 *  - 
 GrammarParser_binary_return
      pGrammarParser->binary(pGrammarParser)
 *  - 
 GrammarParser_assShiftBinary_return
      pGrammarParser->assShiftBinary(pGrammarParser)
 *  - 
 GrammarParser_multAssBinary_return
      pGrammarParser->multAssBinary(pGrammarParser)
 *  - 
 GrammarParser_sumAssBinary_return
      pGrammarParser->sumAssBinary(pGrammarParser)
 *  - 
 GrammarParser_assBinary_return
      pGrammarParser->assBinary(pGrammarParser)
 *  - 
 GrammarParser_logOrBinary_return
      pGrammarParser->logOrBinary(pGrammarParser)
 *  - 
 GrammarParser_logAndBinary_return
      pGrammarParser->logAndBinary(pGrammarParser)
 *  - 
 GrammarParser_binOrBinary_return
      pGrammarParser->binOrBinary(pGrammarParser)
 *  - 
 GrammarParser_xorBinary_return
      pGrammarParser->xorBinary(pGrammarParser)
 *  - 
 GrammarParser_binAndBinary_return
      pGrammarParser->binAndBinary(pGrammarParser)
 *  - 
 GrammarParser_eqBinary_return
      pGrammarParser->eqBinary(pGrammarParser)
 *  - 
 GrammarParser_compBinary_return
      pGrammarParser->compBinary(pGrammarParser)
 *  - 
 GrammarParser_binShiftBinary_return
      pGrammarParser->binShiftBinary(pGrammarParser)
 *  - 
 GrammarParser_plusBinary_return
      pGrammarParser->plusBinary(pGrammarParser)
 *  - 
 GrammarParser_multBinary_return
      pGrammarParser->multBinary(pGrammarParser)
 *  - 
 GrammarParser_unOpNeg_return
      pGrammarParser->unOpNeg(pGrammarParser)
 *  - 
 GrammarParser_unOpPlus_return
      pGrammarParser->unOpPlus(pGrammarParser)
 *  - 
 GrammarParser_unOpFix_return
      pGrammarParser->unOpFix(pGrammarParser)
 *  - 
 GrammarParser_unary_return
      pGrammarParser->unary(pGrammarParser)
 *  - 
 GrammarParser_braces_return
      pGrammarParser->braces(pGrammarParser)
 *  - 
 GrammarParser_listExpr_return
      pGrammarParser->listExpr(pGrammarParser)
 *  - 
 GrammarParser_call_return
      pGrammarParser->call(pGrammarParser)
 *  - 
 GrammarParser_indexer_return
      pGrammarParser->indexer(pGrammarParser)
 *  - 
 GrammarParser_place_return
      pGrammarParser->place(pGrammarParser)
 *  - 
 GrammarParser_literal_return
      pGrammarParser->literal(pGrammarParser)
 *  - 
 GrammarParser_expr_return
      pGrammarParser->expr(pGrammarParser)
 *  - 
 GrammarParser_exprTerm_return
      pGrammarParser->exprTerm(pGrammarParser)
 *  - 
 GrammarParser_exprTermTerm_return
      pGrammarParser->exprTermTerm(pGrammarParser)
 *  - 
 GrammarParser_builtin_return
      pGrammarParser->builtin(pGrammarParser)
 *  - 
 GrammarParser_custom_return
      pGrammarParser->custom(pGrammarParser)
 *  - 
 GrammarParser_array_return
      pGrammarParser->array(pGrammarParser)
 *  - 
 GrammarParser_typeRef_return
      pGrammarParser->typeRef(pGrammarParser)
 *  - 
 GrammarParser_argDef_return
      pGrammarParser->argDef(pGrammarParser)
 *  - 
 GrammarParser_listArgDef_return
      pGrammarParser->listArgDef(pGrammarParser)
 *  - 
 GrammarParser_identifierItem_return
      pGrammarParser->identifierItem(pGrammarParser)
 *  - 
 GrammarParser_listIdentifier_return
      pGrammarParser->listIdentifier(pGrammarParser)
 *  - 
 GrammarParser_funcSignature_return
      pGrammarParser->funcSignature(pGrammarParser)
 *  - 
 GrammarParser_var_return
      pGrammarParser->var(pGrammarParser)
 *  - 
 GrammarParser_ifStatement_return
      pGrammarParser->ifStatement(pGrammarParser)
 *  - 
 GrammarParser_block_return
      pGrammarParser->block(pGrammarParser)
 *  - 
 GrammarParser_whileStatement_return
      pGrammarParser->whileStatement(pGrammarParser)
 *  - 
 GrammarParser_doStatement_return
      pGrammarParser->doStatement(pGrammarParser)
 *  - 
 GrammarParser_breakStatement_return
      pGrammarParser->breakStatement(pGrammarParser)
 *  - 
 GrammarParser_expression_return
      pGrammarParser->expression(pGrammarParser)
 *  - 
 GrammarParser_statement_return
      pGrammarParser->statement(pGrammarParser)
 *  - 
 GrammarParser_funcDef_return
      pGrammarParser->funcDef(pGrammarParser)
 *  - 
 GrammarParser_sourceItem_return
      pGrammarParser->sourceItem(pGrammarParser)
 *  - 
 GrammarParser_source_return
      pGrammarParser->source(pGrammarParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_GrammarParser_H
#define _GrammarParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct GrammarParser_Ctx_struct GrammarParser, * pGrammarParser;



   #define _empty NULL


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct GrammarParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_identifier_return;



typedef struct GrammarParser_str_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_str_return;



typedef struct GrammarParser_charStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_charStatement_return;



typedef struct GrammarParser_hex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_hex_return;



typedef struct GrammarParser_bits_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_bits_return;



typedef struct GrammarParser_dec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_dec_return;



typedef struct GrammarParser_boolStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_boolStatement_return;



typedef struct GrammarParser_binOpBinAssLog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpBinAssLog_return;



typedef struct GrammarParser_binOpBinAssShift_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpBinAssShift_return;



typedef struct GrammarParser_binOpMultAss_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpMultAss_return;



typedef struct GrammarParser_binOpSumAss_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpSumAss_return;



typedef struct GrammarParser_binOpAss_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpAss_return;



typedef struct GrammarParser_binOpLogOr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpLogOr_return;



typedef struct GrammarParser_binOpLogAnd_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpLogAnd_return;



typedef struct GrammarParser_binOpBinOr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpBinOr_return;



typedef struct GrammarParser_binOpXOR_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpXOR_return;



typedef struct GrammarParser_binOpBinAnd_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpBinAnd_return;



typedef struct GrammarParser_binOpEq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpEq_return;



typedef struct GrammarParser_binOpComp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpComp_return;



typedef struct GrammarParser_binOpBinShift_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpBinShift_return;



typedef struct GrammarParser_binOpPlus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpPlus_return;



typedef struct GrammarParser_binOpMult_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOpMult_return;



typedef struct GrammarParser_binary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binary_return;



typedef struct GrammarParser_assShiftBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_assShiftBinary_return;



typedef struct GrammarParser_multAssBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_multAssBinary_return;



typedef struct GrammarParser_sumAssBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_sumAssBinary_return;



typedef struct GrammarParser_assBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_assBinary_return;



typedef struct GrammarParser_logOrBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_logOrBinary_return;



typedef struct GrammarParser_logAndBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_logAndBinary_return;



typedef struct GrammarParser_binOrBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binOrBinary_return;



typedef struct GrammarParser_xorBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_xorBinary_return;



typedef struct GrammarParser_binAndBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binAndBinary_return;



typedef struct GrammarParser_eqBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_eqBinary_return;



typedef struct GrammarParser_compBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_compBinary_return;



typedef struct GrammarParser_binShiftBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_binShiftBinary_return;



typedef struct GrammarParser_plusBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_plusBinary_return;



typedef struct GrammarParser_multBinary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_multBinary_return;



typedef struct GrammarParser_unOpNeg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_unOpNeg_return;



typedef struct GrammarParser_unOpPlus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_unOpPlus_return;



typedef struct GrammarParser_unOpFix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_unOpFix_return;



typedef struct GrammarParser_unary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_unary_return;



typedef struct GrammarParser_braces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_braces_return;



typedef struct GrammarParser_listExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_listExpr_return;



typedef struct GrammarParser_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_call_return;



typedef struct GrammarParser_indexer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_indexer_return;



typedef struct GrammarParser_place_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_place_return;



typedef struct GrammarParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_literal_return;



typedef struct GrammarParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_expr_return;



typedef struct GrammarParser_exprTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_exprTerm_return;



typedef struct GrammarParser_exprTermTerm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_exprTermTerm_return;



typedef struct GrammarParser_builtin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_builtin_return;



typedef struct GrammarParser_custom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_custom_return;



typedef struct GrammarParser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_array_return;



typedef struct GrammarParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_typeRef_return;



typedef struct GrammarParser_argDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_argDef_return;



typedef struct GrammarParser_listArgDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_listArgDef_return;



typedef struct GrammarParser_identifierItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_identifierItem_return;



typedef struct GrammarParser_listIdentifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_listIdentifier_return;



typedef struct GrammarParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_funcSignature_return;



typedef struct GrammarParser_var_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_var_return;



typedef struct GrammarParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_ifStatement_return;



typedef struct GrammarParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_block_return;



typedef struct GrammarParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_whileStatement_return;



typedef struct GrammarParser_doStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_doStatement_return;



typedef struct GrammarParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_breakStatement_return;



typedef struct GrammarParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_expression_return;



typedef struct GrammarParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_statement_return;



typedef struct GrammarParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_funcDef_return;



typedef struct GrammarParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_sourceItem_return;



typedef struct GrammarParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    GrammarParser_source_return;




/** Context tracking structure for 
GrammarParser

 */
struct GrammarParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     GrammarParser_identifier_return
     (*identifier)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_str_return
     (*str)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_charStatement_return
     (*charStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_hex_return
     (*hex)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_bits_return
     (*bits)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_dec_return
     (*dec)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_boolStatement_return
     (*boolStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpBinAssLog_return
     (*binOpBinAssLog)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpBinAssShift_return
     (*binOpBinAssShift)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpMultAss_return
     (*binOpMultAss)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpSumAss_return
     (*binOpSumAss)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpAss_return
     (*binOpAss)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpLogOr_return
     (*binOpLogOr)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpLogAnd_return
     (*binOpLogAnd)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpBinOr_return
     (*binOpBinOr)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpXOR_return
     (*binOpXOR)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpBinAnd_return
     (*binOpBinAnd)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpEq_return
     (*binOpEq)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpComp_return
     (*binOpComp)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpBinShift_return
     (*binOpBinShift)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpPlus_return
     (*binOpPlus)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOpMult_return
     (*binOpMult)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binary_return
     (*binary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_assShiftBinary_return
     (*assShiftBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_multAssBinary_return
     (*multAssBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_sumAssBinary_return
     (*sumAssBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_assBinary_return
     (*assBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_logOrBinary_return
     (*logOrBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_logAndBinary_return
     (*logAndBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binOrBinary_return
     (*binOrBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_xorBinary_return
     (*xorBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binAndBinary_return
     (*binAndBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_eqBinary_return
     (*eqBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_compBinary_return
     (*compBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_binShiftBinary_return
     (*binShiftBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_plusBinary_return
     (*plusBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_multBinary_return
     (*multBinary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_unOpNeg_return
     (*unOpNeg)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_unOpPlus_return
     (*unOpPlus)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_unOpFix_return
     (*unOpFix)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_unary_return
     (*unary)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_braces_return
     (*braces)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_listExpr_return
     (*listExpr)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_call_return
     (*call)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_indexer_return
     (*indexer)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_place_return
     (*place)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_literal_return
     (*literal)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_expr_return
     (*expr)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_exprTerm_return
     (*exprTerm)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_exprTermTerm_return
     (*exprTermTerm)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_builtin_return
     (*builtin)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_custom_return
     (*custom)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_array_return
     (*array)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_typeRef_return
     (*typeRef)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_argDef_return
     (*argDef)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_listArgDef_return
     (*listArgDef)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_identifierItem_return
     (*identifierItem)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_listIdentifier_return
     (*listIdentifier)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_funcSignature_return
     (*funcSignature)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_var_return
     (*var)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_ifStatement_return
     (*ifStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_block_return
     (*block)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_whileStatement_return
     (*whileStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_doStatement_return
     (*doStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_breakStatement_return
     (*breakStatement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_expression_return
     (*expression)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_statement_return
     (*statement)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_funcDef_return
     (*funcDef)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_sourceItem_return
     (*sourceItem)	(struct GrammarParser_Ctx_struct * ctx);

     GrammarParser_source_return
     (*source)	(struct GrammarParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct GrammarParser_Ctx_struct * ctx);
    void	    (*free)   (struct GrammarParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pGrammarParser GrammarParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pGrammarParser GrammarParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define T__87      87
#define T__88      88
#define T__89      89
#define T__90      90
#define T__91      91
#define T__92      92
#define T__93      93
#define T__94      94
#define T__95      95
#define T__96      96
#define T__97      97
#define T__98      98
#define T__99      99
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__107      107
#define T__108      108
#define T__109      109
#define T__110      110
#define T__111      111
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define ArgDef      4
#define Array      5
#define BIT      6
#define BinOpAss      7
#define BinOpBinAnd      8
#define BinOpBinAssAnd      9
#define BinOpBinAssDiv      10
#define BinOpBinAssLS      11
#define BinOpBinAssMod      12
#define BinOpBinAssMul      13
#define BinOpBinAssNeg      14
#define BinOpBinAssOr      15
#define BinOpBinAssRS      16
#define BinOpBinAssSum      17
#define BinOpBinAssXOR      18
#define BinOpBinLS      19
#define BinOpBinMinus      20
#define BinOpBinOr      21
#define BinOpBinPlus      22
#define BinOpBinRS      23
#define BinOpBinXOR      24
#define BinOpDiv      25
#define BinOpEq      26
#define BinOpGt      27
#define BinOpGte      28
#define BinOpLogAnd      29
#define BinOpLogOr      30
#define BinOpLt      31
#define BinOpLte      32
#define BinOpMod      33
#define BinOpMul      34
#define BinOpNonEq      35
#define Binary      36
#define Bits      37
#define Block      38
#define BoolStatement      39
#define Braces      40
#define BreakStatement      41
#define Builtin      42
#define CHARACTER      43
#define Call      44
#define CharStatement      45
#define Custom      46
#define DECIMAL      47
#define Dec      48
#define DoStatement      49
#define Expr      50
#define Expression      51
#define FuncDef      52
#define FuncSignature      53
#define HEXADEMIC      54
#define Hex      55
#define ID      56
#define IdItem      57
#define Identifier      58
#define IfStatement      59
#define Indexer      60
#define List      61
#define Literal      62
#define Place      63
#define STRING      64
#define Source      65
#define SourceItem      66
#define Statement      67
#define Str      68
#define TypeRef      69
#define UnOp      70
#define Unary      71
#define Var      72
#define WHITESPACE      73
#define WhileStatement      74
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for GrammarParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
